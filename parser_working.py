#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" Parse Toycluster/WVTICs/Gadget2/Gadget3 format 2 snapshots """

import numpy
import astropy
from astropy.io import ascii

__author__ = "Timo Halbesma"
__email__ = "halbesma@MPA-Garching.MPG.DE"


def set_header(f, verbose=False):
    if verbose: print ("    Parsing block as header")
    blocklength = numpy.fromfile(f, dtype=numpy.uint32, count=1)

    header = dict()

    header["npart"] = numpy.fromfile(f, dtype=numpy.uint32, count=6)
    header["ngas"] = header["npart"][0]
    header["ndm"] = header["npart"][1]
    header["ntot"] = numpy.sum(header["npart"])
    header["massarr"] = numpy.fromfile(f, dtype=numpy.float64, count=6)
    header["time"] = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
    header["redshift"] = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
    # unused in public version of GADGET-2
    header["flag_sfr"] = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]
    header["flag_feedback"] = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]  # unused
    header["npartTotal"] = numpy.fromfile(f, dtype=numpy.int32, count=6)
    header["flag_cooling"] = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]
    header["numFiles"] = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]
    header["boxSize"] = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
    header["omega0"] = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
    header["omegalambda"] = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
    header["hubbleParam"] = numpy.fromfile(f, dtype=numpy.float64, count=1)[0]
    header["flag_age"] = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]  # unused
    header["flag_metals"] = numpy.fromfile(f, dtype=numpy.int32, count=1)[0]  # unused
    header["numpart_total_hw"] = numpy.fromfile(f, dtype=numpy.int32, count=6)  # unused

    header["bytesleft"] = 256-6*4 - 6*8 - 8 - 8 - 2*4-6*4 - 4 - 4 - 8 - 8 - 8 - 8 - 4 - 4 - 6*4
    header["la"] = numpy.fromfile(f, dtype=numpy.uint16, count=header["bytesleft"]//2)

    blocklength_end = numpy.fromfile(f, dtype="uint32", count=1)
    if blocklength != blocklength_end:
        print ("ERROR: blocklengths differ")

    if verbose:
        print ("\n      Header")
        for k, v in iter(header.items()): print (" "*8+"{0:<15}: {1}".format(k, v))
        print

    return header


def eat_snapshot(filename, block="all", verbose=False):
    """ Eat Toycluster/Gadget-2/Gadget-3 output

        Inspired by https://stackoverflow.com/questions/23377274

        See Gadget-2 user guide for details. The data blocks are:
            Header
            Block 0 (Coordinates)
            Block 1 (Velocities)
            Block 2 (ParticleIDs)
            Block 3 (Density)         <-- gas only
            Block 4 (Model Density)   <-- gas only (Toycluster only; not Gadget2)
            Block 5 (SmoothingLength) <-- gas only
            Block 6 (InternalEnergy)  <-- gas only
            Block 7 (MagneticField)   <-- gas only (Toycluster only; not Gadget2)

        @param filename: path to the Binary Fortran 77 Unformatted file
        @param verbose : output block info (length/name)
        @return        : The function returns a 3-tuple with the following elements
                         header -> dict
                         gas    -> astropy.table.Table
                         dm     -> astropy.table.Table """

    if verbose: print ("\nParsing ICs generated by Toycluster 2.0/NFW")

    def eat_block(f, dtype="int8"):
        """ Read Fortran 77 unformatted block
            @param f:     open file buffer, file
            @param dtype: data type (int8, float32, etc)
            @return:      list that contains the block content """
        length = numpy.fromfile(f, dtype=numpy.uint32, count=1)
        if not length: return None  # EOF reached
        if verbose: print ("  Eating block of length:", length[0])
        # float32/uint32 is 4 bytes so count=length/4 in for non-byte dtype
        content = numpy.fromfile(f, dtype=dtype,
            count=length[0] if dtype == "int8" else length[0]//4)
        end_length = numpy.fromfile(f, dtype=numpy.uint32, count=1)

        if end_length != length:
            print ("  ERROR: blocklengths differ")
            return None
        return content

    def name_block(block):
        """ Translate Fortran 77 unformatted block name from ascii values to str
            @param block: list of ascii values
            @return:      name of block, string """
        name = ""
        for i, char in enumerate(block):
            if i == 4:
                break
            if 65 <= char <= 90:
                name += chr(char)
            else:
                break
        if verbose and len(name) is not 0: print ("    Block name:", name)
        return name

    def set_pos_or_vel(f, name):
        """ float32; first gas (x,y,z) then dm (x,y,z) """
        name = "" if name == "POS" else "v"
        if verbose: print ("    Parsing block as position")
        block = eat_block(f, dtype="float32")
        block = block.reshape((header["ntot"], 3))
        gaspart = block[0:header["ngas"]]
        dmpart = block[header["ngas"]:header["ntot"]]
        # NB radius has to be calculated after shifting back haloes (-boxsize/2)
        gas[name+"x"] = gaspart[:,0]
        gas[name+"y"] = gaspart[:,1]
        gas[name+"z"] = gaspart[:,2]
        dm[name+"x"] = dmpart[:,0]
        dm[name+"y"] = dmpart[:,1]
        dm[name+"z"] = dmpart[:,2]

    def set_id(f, name=None):
        """ uint32, first gas then dm """
        if verbose: print ("    Parsing block as id")
        block = eat_block(f, dtype="uint32")
        gas["id"] = block[0:header["ngas"]]
        dm["id"] = block[header["ngas"]:header["ntot"]]

    def set_gas_float32(f, name):
        """ float 32, gas only: rho/hsml/u and rhom (rhom Toycluster only) """
        if verbose: print ("    Parsing block as gas-only float32")
        gas[name.lower()] = eat_block(f, dtype="float32")

    def set_magnetic_field(f, name=None):
        """ float32, gas only, Toycluster only (not Gadget-2) """
        if verbose: print ("    Parsing block as magnetic field")
        block = eat_block(f, dtype="float32")
        block = block.reshape((header["ngas"], 3))
        gas["Bx"] = block[:,0]
        gas["By"] = block[:,1]
        gas["Bz"] = block[:,2]

    def void_block(f, name):
        """ read but not save block """
        if verbose: print ("    Voiding block as gas-only float32")
        length = numpy.fromfile(f, dtype=numpy.uint32, count=1)
        if not length: return None  # EOF reached
        if verbose: print ("    Blocklength:", length[0])
        f.seek(length[0], 1)  # 1 means relative to current position
        end_length = numpy.fromfile(f, dtype=numpy.uint32, count=1)

        if end_length != length:
            print ("  ERROR: blocklengths differ")
            return None
        if verbose: print ("    WARNING: block '{0}' is not saved!".format(name))

    header = dict()
    gas = astropy.table.Table()
    dm = astropy.table.Table()
    # Map name of block to a function pointer that handles parsing the data
    routines = { "HEAD": set_header, "POS": set_pos_or_vel, "VEL": set_pos_or_vel,
                 "ID": set_id, "RHO": set_gas_float32, "RHOM":  set_gas_float32,
                 "HSML": set_gas_float32,  "U": set_gas_float32, "BFLD": set_magnetic_field,
                 "DIVB": void_block, "ACVC": void_block, "AMDC": void_block,
                 "MACH": void_block, "SHSP": void_block, "SHCP": void_block,
                 "SHNR": void_block, "SHRH": void_block, "SHPR": void_block,
                 "SHVU": void_block, "VRMS": void_block, "VDIV": void_block,
                 "VROT": void_block, "INFO": void_block }

    with open(filename, "rb") as f:
        while True:
            block = eat_block(f)  # data is preceded by byte /w name of block
            if block is None: break  # EOF reached, or error reading block
            blockname = name_block(block)
            if blockname and blockname == "HEAD":
                header = set_header(f, verbose=verbose)
            elif blockname:
                routines.get(blockname, void_block)(f, blockname)

    if verbose:
        print ("\nGas")
        print (gas)
        print ("\nDM")
        print (dm)

    return header, gas, dm


def eat_f77(snap, blockname, verbose=False):
     with open(snap, "rb") as f:
         while True:
             # Eat name
             length = numpy.fromfile(f, dtype=numpy.uint32, count=1)
             if not length: break
             content = numpy.fromfile(f, dtype="int8", count=length)
             end_length = numpy.fromfile(f, dtype=numpy.uint32, count=1)

             if end_length != length:
                 print ("  ERROR: blocklengths differ")
                 break

             name = "".join(chr(c) for c in content[:4] if 65 <= c <= 90)
             if verbose: print ("Eating", name)

             if blockname.lower() == "head":
                 return set_header(f, verbose=verbose)

             length = numpy.fromfile(f, dtype=numpy.uint32, count=1)
             if not length: break
             if name.strip().lower() != blockname.lower():
                 f.seek(length[0], 1)
             else:
                 content = numpy.fromfile(f, dtype="float32", count=length/4)

                 return content
             end_length = numpy.fromfile(f, dtype=numpy.uint32, count=1)

             if end_length != length:
                 print ("  ERROR: blocklengths differ")
                 break
     return None
